mgmg
puro
mgmg@gmail.com
09132131231
test line 1 
test line 2
Myanmar
Rangoon
Yangon
223322

sk_test_51Iqqd0HEZSswdrqJANVBJ1CxYA8QHWTvVH2fHwwMA7NEKiW5BIvtL00e23nxD1CfNJTvllPFx2JB5NNJY9kJMMDz00cBou1dWk


public function placeOrder(){
        $this->validate([
            'firstname'=>'required',
            'lastname'=>'required',
            'email'=>'required|email',
            'line1'=>'required',
            'mobile'=>'required|numeric',
            'line2'=>'required',
            'city'=>'required',
            'province'=>'required',
            'country'=>'required',
            'zipcode'=>'required',
            'paymentmode'=>'required'
        ]);
        if($this->paymentmode == 'card'){
            $this->validate([
                'card_no'=>'required|numeric',
                'exp_month'=>'required|numeric',
                'exp_year'=>'required|numeric',
                'cvc'=>'required|numeric'
            ]);
        }
        $order=new Order();
        $order->user_id=Auth::user()->id;
        $order->subtotal=session()->get('checkout')['subtotal'];
        $order->discount=session()->get('checkout')['discount'];
        $order->tax=session()->get('checkout')['tax'];
        $order->total=session()->get('checkout')['total'];
        $order->firstname=$this->firstname;
        $order->lastname=$this->lastname;
        $order->email=$this->email;
        $order->line1=$this->line1;
        $order->mobile=$this->mobile;
        $order->line2=$this->line2;
        $order->city=$this->city;
        $order->province=$this->province;
        $order->country=$this->country;
        $order->zipcode=$this->zipcode;
        $order->status='ordered';
        $order->is_shipping_different=$this->ship_to_different ? 1:0;
        $order->save();

        foreach(Cart::instance('cart')->content() as $item){
            $orderItem=new OrderItem();
            $orderItem->product_id=$item->id;
            $orderItem->order_id=$order->id;
            $orderItem->price=$item->price;
            $orderItem->quantity=$item->qty;
            $orderItem->save();
        }
        if($this->ship_to_different){
            $this->validate([
                's_firstname'=>'required',
                's_lastname'=>'required',
                's_email'=>'required|email',
                's_line1'=>'required',
                's_mobile'=>'required|numeric',
                's_line2'=>'required',
                's_city'=>'required',
                's_province'=>'required',
                's_country'=>'required',
                's_zipcode'=>'required'
            ]);
            $shipping= new Shipping();
            $shipping->order_id=$order->id;
            $shipping->firstname=$this->s_firstname;
            $shipping->lastname=$this->s_lastname;
            $shipping->email=$this->s_email;
            $shipping->line1=$this->s_line1;
            $shipping->mobile=$this->s_mobile;
            $shipping->line2=$this->s_line2;
            $shipping->city=$this->s_city;
            $shipping->province=$this->s_province;
            $shipping->country=$this->s_country;
            $shipping->zipcode=$this->s_zipcode;
            $shipping->save();
        }

    
    if($this->paymentmode=='cod'){
        $this->maketransaction($order->id,'pending');
        $this->resetCart();
    }else if($this->paymentmode=='card'){
        $stripe=Stripe::make(env('STRIPE_KEY'));
        try{
            $token=$stripe->tokens()->create([
                'card'=>[
                    'number'=>$this->card_no,
                    'exp_month'=>$this->exp_month,
                    'exp_year'=>$this->exp_year,
                    'cvc'=>$this->cvc
                ]
            ]);
            if(!isset($token['id'])){
                session()->flash('stripe_error','The stripe token was not generated correctly!');
                $this->thankyou=0;
            }
            $customer=$stripe->customers()->create([
                'name'=>$this->firstname.' '.$this->lastname,
                'email'=>$this->email,
                'phone'=>$this->mobile,
                'address'=>[
                    'line1'=>$this->line1,
                    'postal_code'=>$this->zipcode,
                    'city'=>$this->city,
                    'state'=>$this->province,
                    'country'=>$this->country,
                    
                ],
                'shipping'=>[
                    'name'=>$this->firstname.' '.$this->lastname,
                    'address'=>[
                        'line1'=>$this->line1,
                        'postal_code'=>$this->zipcode,
                        'city'=>$this->city,
                        'state'=>$this->province,
                        'country'=>$this->country,
                        
                    ],
                ],
                'source'=>$token['id']
            ]);
            $charge=$stripe->charges()->create([
                'customer'=>$customer['id'],
                'currency'=>'USD',
                'amount'=>session()->get('checkout')['total'],
                'description'=>'Payment for order no '.$order->id
            ]);
            if($charge['status']=='succeeded'){
                $this->maketransaction($order->id,'approved');
                $this->resetCart();
            }else{
                session_flash('stripe_error','Error in Transaction');
                $this->thankyou=0;
            }
        }catch(Exception $e){
            session()->flash('stripe_error',$e->message);
            $this->thankyou=0;
        }
    }

    }
----------------------------Wrong
public function placeOrder()
	{
		$this->validate([
		'firstname'=>'required',
		'lastname'=>'required',
		'email'=>'required|email',
		'mobile'=>'required|numeric',
		'line1'=>'required',
		'city'=>'required',
		'province'=>'required',
		'country'=>'required',
		'zipcode'=>'required',
		'paymentmode'=>'required',
		]);
		if($this->paymentmode == "card")
		{
			$this->validate([
				'card_no'=>'required|numeric',
				'exp_month'=>'required|numeric',
				'exp_year'=>'required|numeric',
				'cvc'=>'required|numeric',
			]);
		}
		$order  = new Order();
		$order->user_id = Auth::user()->id ;
		$order->subtotal = session()->get('checkout')['subtotal'] ;
		$order->discount = session()->get('checkout')['discount'] ;
		$order->tax = session()->get('checkout')['tax'] ;
		$order->total = session()->get('checkout')['total'] ;
		$order->firstname=$this->firstname;
	    $order->lastname=$this->lastname;
	    $order->email=$this->email;
	    $order->mobile=$this->mobile;
	    $order->line1=$this->line1;
	    $order->line2=$this->line2;
	    $order->city=$this->city;
	    $order->province=$this->province;
	    $order->country=$this->country;
	    $order->zipcode=$this->zipcode;
	    $order->status = 'ordered';
	    $order->is_shipping_different = $this->ship_to_different?1:0;
	    $order->save();

	    foreach(Cart::instance('cart')->content() as $item)
	    {
	    	$orderItem = new OrderItem();
	    	$orderItem->product_id = $item->id;
	    	$orderItem->order_id = $order->id;
	    	$orderItem->price = $item->price;
	    	$orderItem->quantity = $item->qty;
	    	$orderItem->save();
	    }
	    if($this->ship_to_different)
	    {
	    	$this->validate([
			's_firstname'=>'required',
			's_lastname'=>'required',
			's_email'=>'required|email',
			's_mobile'=>'required|numeric',
			's_line1'=>'required',
			's_city'=>'required',
			's_province'=>'required',
			's_country'=>'required',
			's_zipcode'=>'required',
			]);
			$shipping = new Shipping();
			$shipping->order_id=$order->id;
			$shipping->firstname=$this->s_firstname;
	    	$shipping->lastname=$this->s_lastname;
	    	$shipping->email=$this->s_email;
	    	$shipping->mobile=$this->s_mobile;
	    	$shipping->line1=$this->s_line1;
	    	$shipping->line2=$this->s_line2;
	    	$shipping->city=$this->s_city;
	    	$shipping->province=$this->s_province;
	    	$shipping->country=$this->s_country;
	    	$shipping->zipcode=$this->s_zipcode;
	    	$shipping->save(); 
	    }
	    if($this->paymentmode == 'cod')
	    {
	    	$this->makeTransaction($order->id,'pending');
	    	$this->resetCart();

	    }else if($this->paymentmode == "card")
	    {
	    	$stripe = Stripe::make(env('STRIPE_KEY'));
	    	try
	    	{
	    		$token = $stripe->tokens()->create([
	    			'card'=>[
	    				'number'=>$this->card_no,
	    				'exp_month'=>$this->exp_month,
	    				'exp_year'=>$this->exp_year,
	    				'cvc'=>$this->cvc,
	    			]
	    		]);
	    		if(!isset($token['id']))
	    		{
	    			session()->flash('stripe_error',"The Stripe token was not generated");
	    			$this->thankyou = 0;
	    		}
	    		$customer = $stripe->customers()->create([
	    				'name'=>$this->firstname . ' '.$this->lastname,
	    				'email'=>$this->email,
	    				'phone'=>$this->mobile,
	    				'address'=>[
	    					'line1'=>$this->line1,
	    					'postal_code'=>$this->zipcode,
	    					'city'=>$this->city,
	    					'state'=>$this->province,
	    					'country'=>$this->country,
	    				],
	    				'shipping'=>[
	    					'name'=>$this->firstname.' '.$this->lastname,
	    					'address'=>[
	    						'line1'=>$this->line1,
	    						'postal_code'=>$this->zipcode,
	    						'city'=>$this->city,
	    						'state'=>$this->province,
	    						'country'=>$this->country,
	    					],
	    				],
	    				'source'=>$token['id'],
	    		]);
	    		dd($token);
	    		$charge = $stripe->charges()->create([
	    			'customer_id'=>$customer['id'],
	    			'currency'=>'USD',
	    			'amount'=>session()->get('checkout')['total'],
	    			'description'=>'Payment for order no '.$order->id,
	    		]);
	    		if($charge['status']=='succeeded')
	    		{
	    			$this->makeTransaction($order->id,'approved');
	    			$this->resetCart();
	    		}else
	    		{
	    			session()->flash('stripe_error','Error In transaction');
	    			$this->thankyou=0;
	    		}
	    	}catch(Exception $e)
	    	{
	    		session()->flash('stripe_error',$e->getMessage());
	    		$this->thankyou=0;
	    	}
	    }

	    
	}